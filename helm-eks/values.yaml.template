# Default values for aurora.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1
revisionHistoryLimit: 1

minReadySeconds: 30

namespace: "${NAMESPACE}"

labels:
  app: "${NAMESPACE}-${APP_NAME}"
  env: "${ENV}"

selectorLabels:
  app: "${NAMESPACE}-${APP_NAME}"
  env: "${ENV}"
  tags.otel/env: "${ENV}"
  tags.otel/service: "${NAMESPACE}-${APP_NAME}"
  tags.otel/version: "${IMAGE_TAG}"

image:
  repository: "${ECR_REPO_URL}/${APP_NAME}"
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "${IMAGE_TAG}"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "${APP_NAME}"

env:
  - name: OTEL_EXPORTER_ENDPOINT
    value: "${OTEL_EXPORTER_ENDPOINT}"
  - name: OTEL_ENV
    valueFrom:
      fieldRef:
        fieldPath: metadata.labels['tags.otel/env']
  - name: OTEL_SERVICE
    valueFrom:
      fieldRef:
        fieldPath: metadata.labels['tags.otel/service']
  - name: OTEL_VERSION
    valueFrom:
      fieldRef:
        fieldPath: metadata.labels['tags.otel/version']

  - name: SECRET_KEY
    value: "${SECRET_KEY}"

  - name: DATABASE_NAME
    value: "${DATABASE_NAME}"
  - name: HIPPO_DATABASE_NAME
    value: "${HIPPO_DATABASE_NAME}"  
  - name: DATABASE_PORT
    value: "${DATABASE_PORT}"
  - name: DATABASE_USER
    value: "${DATABASE_USER}"
  - name: DATABASE_PASSWORD
    value: "${AWS_PG_PW}"
  - name: DATABASE_HOST
    value: "${DATABASE_HOST}"

  - name: HTTP_AUTH_ID
    value: "${HTTP_AUTH_ID}"
  - name: CLOUD_ID
    value: "${CLOUD_ID}"
  - name: ELASTIC_PW
    value: "${ELASTIC_PW}"
  - name: INDEX_NAME
    value: "${INDEX_NAME}"
  - name: LOG_INDEX_NAME
    value: "${LOG_INDEX_NAME}"

  - name: CSRF_TRUSTED_ORIGIN
    value: "${CSRF_TRUSTED_ORIGIN}"

  - name: ENV
    value: "${ENV}"

service:
  protocol: TCP
  port: 80
  targetPort: "${SERVICE_PORT}"
  type: "${SERVICE_TYPE}"

ingress:
  enabled: true
  className: "alb"
  annotations:
    alb.ingress.kubernetes.io/group.name: "arbeon-${ENV}-${ALB_NAME}-group"
    alb.ingress.kubernetes.io/load-balancer-name: "arbeon-${ENV}-${ALB_NAME}"
    alb.ingress.kubernetes.io/ssl-redirect: '443'
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/scheme: "${ALB_SCHEME}"
    alb.ingress.kubernetes.io/target-type: instance
    alb.ingress.kubernetes.io/certificate-arn: "${ALB_CERT_ARN}"
    alb.ingress.kubernetes.io/load-balancer-attributes: access_logs.s3.enabled=true,access_logs.s3.bucket=arbeon-${ENV}-alb-access-logs,access_logs.s3.prefix=${ALB_NAME}
  rules:
    - host: "${INGRESS_HOST}"
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: "${NAMESPACE}-${APP_NAME}-service"
              port:
                number: 80

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

nodeSelector:
  node: worker
  type: "m5.large"
